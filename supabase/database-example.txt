# 评论数据表

create table public.comments (
  id uuid not null default gen_random_uuid (),
  post_slug text not null,
  content text not null,
  author_name text not null,
  author_email text not null,
  author_website text null,
  author_avatar_url text null,
  user_id uuid null,
  parent_id uuid null,
  status text not null default 'pending'::text,
  os text null,
  browser text null,
  created_at timestamp with time zone not null default now(),
  ip_address text null,
  constraint comments_pkey primary key (id),
  constraint comments_parent_id_fkey foreign KEY (parent_id) references comments (id),
  constraint comments_user_id_fkey foreign KEY (user_id) references profiles (id) on delete set null,
  constraint comments_content_check check ((char_length(content) > 0)),
  constraint comments_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'approved'::text,
          'rejected'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists comments_post_slug_idx on public.comments using btree (post_slug) TABLESPACE pg_default;

create index IF not exists comments_status_idx on public.comments using btree (status) TABLESPACE pg_default;

create index IF not exists comments_parent_id_idx on public.comments using btree (parent_id) TABLESPACE pg_default;

// niko对话数据表

create table public.dialogues (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  type text not null,
  path text null,
  fallback_face text null,
  segments jsonb null,
  constraint dialogues_pkey primary key (id)
) TABLESPACE pg_default;

// 游戏数据表

create table public.games (
  id uuid not null default gen_random_uuid (),
  name text not null,
  description text not null,
  created_at timestamp with time zone not null default now(),
  constraint games_pkey primary key (id),
  constraint games_name_key unique (name)
) TABLESPACE pg_default;

create index IF not exists games_name_idx on public.games using btree (name) TABLESPACE pg_default;

// 用户登陆数据表

create table public.profiles (
  id uuid not null,
  display_name text null,
  avatar_url text null,
  constraint profiles_pkey primary key (id),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

// 实时活动数据表

create table public.realtime_status (
  id bigint not null,
  app_name text null,
  updated_at timestamp with time zone not null default now(),
  constraint realtime_status_pkey primary key (id)
) TABLESPACE pg_default;

// 彩蛋输入记录

create table public.user_guesses (
  id bigint generated always as identity not null,
  user_identifier text not null,
  game_id uuid null,
  created_at timestamp with time zone not null default now(),
  ip_address text null,
  submitted_text text null,
  is_correct boolean null default false,
  constraint user_guesses_pkey primary key (id),
  constraint user_guesses_game_id_fkey foreign KEY (game_id) references games (id)
) TABLESPACE pg_default;

create index IF not exists user_guesses_user_identifier_game_id_idx on public.user_guesses using btree (user_identifier, game_id) TABLESPACE pg_default;

// 浏览量

create table public.views (
  slug text not null,
  count bigint null,
  constraint views_pkey primary key (slug)
) TABLESPACE pg_default;



// 数据库函数


begin
  -- 将新用户的 ID 和元数据中的 display_name、avatar_url 插入到 profiles 表
  insert into public.profiles (id, display_name, avatar_url)
  values (
    new.id,
    new.raw_user_meta_data ->> 'name',
    new.raw_user_meta_data ->> 'avatar_url'
  );
  return new;
end;



BEGIN
    INSERT INTO request_counts (ip_address, count, last_request)
    VALUES (ip_addr, 1, now())
    ON CONFLICT (ip_address)
    DO UPDATE SET
        count = request_counts.count + 1,
        last_request = now();
END;


DECLARE
  new_count int;
BEGIN
  INSERT INTO public.views (slug, count) 
  VALUES (page_slug, 1)
  ON CONFLICT (slug)
  DO UPDATE SET
    count = public.views.count + 1 
  RETURNING count INTO new_count;

  RETURN new_count;
END;


DECLARE
    normalized_search TEXT;
BEGIN
    -- 净化搜索词
    normalized_search := lower(regexp_replace(search_term, '[^a-zA-Z0-9\u4e00-\u9fa5]', '', 'g'));

    RETURN QUERY
    SELECT
        g.id,
        g.name,
        g.description
    FROM
        public.games AS g
    WHERE
        -- 对中文部分 或 英文部分进行“精确匹配”(=)
        lower(regexp_replace(split_part(g.name, '/', 1), '[^a-zA-Z0-9\u4e00-\u9fa5]', '', 'g')) = normalized_search
        OR
        lower(regexp_replace(split_part(g.name, '/', 2), '[^a-zA-Z0-9\u4e00-\u9fa5]', '', 'g')) = normalized_search;
END;


BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
